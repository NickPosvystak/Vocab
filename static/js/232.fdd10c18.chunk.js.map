{"version":3,"file":"static/js/232.fdd10c18.chunk.js","mappings":";iLAGaA,EAGgCC,ECSvCC,EAAaC,OAAOC,IAAA,uBACpBC,EAMkB,qBAAfC,WACHA,WAAA,CAC6F,EAGnG,SAASC,IAAqD,IAAAC,EAC5D,IAAKR,EAAMS,cAAe,MAAO,CAAC,EAElC,MAAMC,EAAc,QAAdF,EAAcH,EAAAH,UAAA,IAAAM,EAAAA,EAAAH,EAAAH,GAAmB,IAAIS,IAI3C,IAAIC,EAAcF,EAAWG,IAAIb,EAAMS,eAUvC,OATKG,IACHA,EAAcZ,EAAMS,cAClB,MAKFC,EAAWI,IAAId,EAAMS,cAAeG,IAE/BA,CACT,CAEO,IAAMG,EAAkCR,ICpCxC,SAASS,IAAoD,IAA7BC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAUH,EAC/C,OAAO,WASL,OARqBf,EAAMqB,WAAWJ,EASxC,CACF,CAkBO,IAAMK,EAAgCN,IClClBb,OAAOC,IAAI,iBACZD,OAAOC,IAAI,gBACTD,OAAOC,IAAI,kBACRD,OAAOC,IAAI,qBACdD,OAAOC,IAAI,kBACXD,OAAOC,IAAI,kBACZD,OAAOC,IAAI,iBACJD,OAAOC,IAAI,wBACdD,OAAOC,IAAI,qBACdD,OAAOC,IAAI,kBACND,OAAOC,IAAI,uBACpBD,OAAOC,IAAI,cACXD,OAAOC,IAAI,cACND,OAAOC,IAAI,mBACTD,OAAOC,IAAI,4BCRtB,qBAAXmB,QACoB,qBAApBA,OAAOC,UAC2B,qBAAlCD,OAAOC,SAASC,eAIrBzB,EAAM0B,gBACN1B,EAAM2B,UC+DaC,OAAOC,eACFD,OAAOE,oBACLF,OAAOG,sBACJH,OAAOI,yBACjBJ,OAAOK,eACNL,OAAOM,UCRxB,SAASC,IASd,IAJAlB,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAGYH,EAEZ,MAAMqB,EACJnB,IAAYF,EACRO,EAEAN,EAAuBC,GACvBoB,EAAWC,KACf,MAAM,MAAEC,GAAUH,IAClB,OAAOG,CAAA,EAOT,OAJAX,OAAOY,OAAOH,EAAU,CACtBI,UAAWA,IAAMJ,IAGZA,CACT,CAiBO,IAAMC,EAAyBH,ICjE/B,SAASO,IASd,IAJAzB,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAGYH,EAEZ,MAAMsB,EACJpB,IAAYF,EAAoBuB,EAAkBH,EAAgBlB,GAE9D0B,EAAcC,IACJP,IACDQ,SAOf,OAJAjB,OAAOY,OAAOG,EAAa,CACzBF,UAAWA,IAAME,IAGZA,CACT,CAuBO,ICkB+BG,EDlBzBF,EAA4BF,ICkBHI,EC9GhBC,EAAAA,iCCkCYD,KACTA,CAAA,EDlCzBE,CAAwBC,EAAAA,oCEVxB,MAAMC,UAAmBC,EAAMC,OAAO,CACpCC,QAAS,iDAOEC,EAAkBC,UAC7B,MAAM,KAAEC,SAAeN,EAAiBO,KAAK,cAAeC,GALrCC,MASvB,OATuBA,EAMdH,EAAKG,MALdT,EAAiBU,SAASC,QAAQC,OAAOC,cAAa,UAAAC,OAAaL,GAOnEM,QAAQC,IAAI,8BAA+BV,GACpCA,CAAI,ECZAW,GAAgBC,EAAAA,EAAAA,IAC3B,iBAEAb,MAAOG,EAAUW,KACf,IACE,MAAMC,QAAiBhB,EAAgBI,GAIvC,OAFAO,QAAQC,IAAI,0CAA2CI,GAEhDA,CACT,CAAE,MAAOC,GACP,OAAOF,EAASG,gBAAgBD,EAAME,QACxC,kBCPJ,MA2DA,EA3DiBC,KACf,MAAM,SACJC,EAAQ,aACRC,EAAY,MACZC,EACAC,WAAW,OAAEC,KACXC,EAAAA,EAAAA,MACEnC,EAAWD,IASjB,OAFAqB,QAAQC,IAAIa,IAGVE,EAAAA,EAAAA,MAAA,WAASC,UAAU,YAAWC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAOC,IAAI,eAAeL,UAAU,kBAC9CE,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gBAAeC,SAAC,yDAG/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKC,SAAA,EAClBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,QAAOC,SAAC,cACtBC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,cAAaC,SAAC,yGAK3BC,EAAAA,EAAAA,KAAA,OAAAD,UACEF,EAAAA,EAAAA,MAAA,QAAMO,SAAUZ,GAtBNpB,IAChBX,EAASsB,EAAcX,IACvBqB,IACAZ,QAAQC,IAAIV,EAAK,IAmB4B2B,SAAA,EACrCC,EAAAA,EAAAA,KAAA,SACEK,KAAK,OACLC,YAAY,UACRf,EAAS,OAAQ,CAAEgB,UAAU,OAEnCP,EAAAA,EAAAA,KAAA,SACEK,KAAK,OACLC,YAAY,WACRf,EAAS,QAAS,CAAEgB,UAAU,EAAMC,QAAS,kBAEnDR,EAAAA,EAAAA,KAAA,SACEK,KAAK,WACLC,YAAY,cACRf,EAAS,WAAY,CAAEgB,UAAU,OAGvCP,EAAAA,EAAAA,KAAA,SAAOK,KAAK,SAASI,MAAM,cAC3BT,EAAAA,EAAAA,KAACU,EAAAA,GAAO,CAACC,GAAG,SAASb,UAAU,YAAWC,SAAC,oBAMzC,gBCtDD,IAAIa,EAAE7F,OAAOC,IAAI,iBAAiB6F,EAAE9F,OAAOC,IAAI,gBAAgB8F,EAAE/F,OAAOC,IAAI,kBAAkB+F,EAAEhG,OAAOC,IAAI,qBAAqBgG,EAAEjG,OAAOC,IAAI,kBAAkBiG,EAAElG,OAAOC,IAAI,kBAAkBkG,EAAEnG,OAAOC,IAAI,iBAAiBmG,EAAEpG,OAAOC,IAAI,qBAAqBoG,EAAErG,OAAOC,IAAI,kBAAkBqG,EAAEtG,OAAOC,IAAI,cAAcsG,EAAEvG,OAAOC,IAAI,cAAcuG,EAAExG,OAAOyG,SACzW,IAAIC,EAAE,CAACC,UAAU,WAAW,OAAM,CAAE,EAAEC,mBAAmB,WAAW,EAAEC,oBAAoB,WAAW,EAAEC,gBAAgB,WAAW,GAAGC,EAAEtF,OAAOY,OAAO2E,EAAE,CAAC,EAAE,SAASC,EAAEC,EAAEC,EAAEC,GAAGC,KAAKC,MAAMJ,EAAEG,KAAKvG,QAAQqG,EAAEE,KAAKE,KAAKP,EAAEK,KAAKG,QAAQJ,GAAGV,CAAC,CACwI,SAASe,IAAI,CAAyB,SAASC,EAAER,EAAEC,EAAEC,GAAGC,KAAKC,MAAMJ,EAAEG,KAAKvG,QAAQqG,EAAEE,KAAKE,KAAKP,EAAEK,KAAKG,QAAQJ,GAAGV,CAAC,CADxPO,EAAElF,UAAU4F,iBAAiB,CAAC,EACpQV,EAAElF,UAAU6F,SAAS,SAASV,EAAEC,GAAG,GAAG,kBAAkBD,GAAG,oBAAoBA,GAAG,MAAMA,EAAE,MAAMW,MAAM,yHAAyHR,KAAKG,QAAQV,gBAAgBO,KAAKH,EAAEC,EAAE,WAAW,EAAEF,EAAElF,UAAU+F,YAAY,SAASZ,GAAGG,KAAKG,QAAQZ,mBAAmBS,KAAKH,EAAE,cAAc,EAAgBO,EAAE1F,UAAUkF,EAAElF,UAAsF,IAAIgG,EAAEL,EAAE3F,UAAU,IAAI0F,EACrfM,EAAEC,YAAYN,EAAEX,EAAEgB,EAAEd,EAAElF,WAAWgG,EAAEE,sBAAqB,EAAG,IAAIC,EAAEC,MAAMC,QAAQC,EAAE5G,OAAOM,UAAUuG,eAAeC,EAAE,CAACC,QAAQ,MAAMC,EAAE,CAACC,KAAI,EAAGC,KAAI,EAAGC,QAAO,EAAGC,UAAS,GACtK,SAASC,EAAE5B,EAAEC,EAAEC,GAAG,IAAI2B,EAAEC,EAAE,CAAC,EAAEC,EAAE,KAAKC,EAAE,KAAK,GAAG,MAAM/B,EAAE,IAAI4B,UAAK,IAAS5B,EAAEwB,MAAMO,EAAE/B,EAAEwB,UAAK,IAASxB,EAAEuB,MAAMO,EAAE,GAAG9B,EAAEuB,KAAKvB,EAAEkB,EAAEc,KAAKhC,EAAE4B,KAAKN,EAAEH,eAAeS,KAAKC,EAAED,GAAG5B,EAAE4B,IAAI,IAAIK,EAAErI,UAAUC,OAAO,EAAE,GAAG,IAAIoI,EAAEJ,EAAEhE,SAASoC,OAAO,GAAG,EAAEgC,EAAE,CAAC,IAAI,IAAIC,EAAElB,MAAMiB,GAAGE,EAAE,EAAEA,EAAEF,EAAEE,IAAID,EAAEC,GAAGvI,UAAUuI,EAAE,GAAGN,EAAEhE,SAASqE,CAAC,CAAC,GAAGnC,GAAGA,EAAEqC,aAAa,IAAIR,KAAKK,EAAElC,EAAEqC,kBAAe,IAASP,EAAED,KAAKC,EAAED,GAAGK,EAAEL,IAAI,MAAM,CAACS,SAAS3D,EAAEP,KAAK4B,EAAEwB,IAAIO,EAAEN,IAAIO,EAAE5B,MAAM0B,EAAES,OAAOlB,EAAEC,QAAQ,CAChV,SAASkB,EAAExC,GAAG,MAAM,kBAAkBA,GAAG,OAAOA,GAAGA,EAAEsC,WAAW3D,CAAC,CAAoG,IAAI8D,EAAE,OAAO,SAASC,EAAE1C,EAAEC,GAAG,MAAM,kBAAkBD,GAAG,OAAOA,GAAG,MAAMA,EAAEwB,IAA7K,SAAgBxB,GAAG,IAAIC,EAAE,CAAC,IAAI,KAAK,IAAI,MAAM,MAAM,IAAID,EAAE2C,QAAQ,SAAQ,SAAS3C,GAAG,OAAOC,EAAED,EAAE,GAAE,CAA+E4C,CAAO,GAAG5C,EAAEwB,KAAKvB,EAAE4C,SAAS,GAAG,CAC/W,SAASC,EAAE9C,EAAEC,EAAEC,EAAE2B,EAAEC,GAAG,IAAIC,SAAS/B,EAAK,cAAc+B,GAAG,YAAYA,IAAE/B,EAAE,MAAK,IAAIgC,GAAE,EAAG,GAAG,OAAOhC,EAAEgC,GAAE,OAAQ,OAAOD,GAAG,IAAK,SAAS,IAAK,SAASC,GAAE,EAAG,MAAM,IAAK,SAAS,OAAOhC,EAAEsC,UAAU,KAAK3D,EAAE,KAAKC,EAAEoD,GAAE,GAAI,GAAGA,EAAE,OAAWF,EAAEA,EAANE,EAAEhC,GAASA,EAAE,KAAK6B,EAAE,IAAIa,EAAEV,EAAE,GAAGH,EAAEb,EAAEc,IAAI5B,EAAE,GAAG,MAAMF,IAAIE,EAAEF,EAAE2C,QAAQF,EAAE,OAAO,KAAKK,EAAEhB,EAAE7B,EAAEC,EAAE,IAAG,SAASF,GAAG,OAAOA,CAAC,KAAI,MAAM8B,IAAIU,EAAEV,KAAKA,EADnW,SAAW9B,EAAEC,GAAG,MAAM,CAACqC,SAAS3D,EAAEP,KAAK4B,EAAE5B,KAAKoD,IAAIvB,EAAEwB,IAAIzB,EAAEyB,IAAIrB,MAAMJ,EAAEI,MAAMmC,OAAOvC,EAAEuC,OAAO,CACyQQ,CAAEjB,EAAE5B,IAAI4B,EAAEN,KAAKQ,GAAGA,EAAER,MAAMM,EAAEN,IAAI,IAAI,GAAGM,EAAEN,KAAKmB,QAAQF,EAAE,OAAO,KAAKzC,IAAIC,EAAE+C,KAAKlB,IAAI,EAAyB,GAAvBE,EAAE,EAAEH,EAAE,KAAKA,EAAE,IAAIA,EAAE,IAAOb,EAAEhB,GAAG,IAAI,IAAIkC,EAAE,EAAEA,EAAElC,EAAElG,OAAOoI,IAAI,CAC/e,IAAIC,EAAEN,EAAEa,EADweX,EACrf/B,EAAEkC,GAAeA,GAAGF,GAAGc,EAAEf,EAAE9B,EAAEC,EAAEiC,EAAEL,EAAE,MAAM,GAAGK,EAPsU,SAAWnC,GAAG,OAAG,OAAOA,GAAG,kBAAkBA,EAAS,KAAsC,oBAAjCA,EAAEV,GAAGU,EAAEV,IAAIU,EAAE,eAA0CA,EAAE,IAAI,CAO5biD,CAAEjD,GAAG,oBAAoBmC,EAAE,IAAInC,EAAEmC,EAAEF,KAAKjC,GAAGkC,EAAE,IAAIH,EAAE/B,EAAEkD,QAAQC,MAA6BnB,GAAGc,EAA1Bf,EAAEA,EAAEvD,MAA0ByB,EAAEC,EAAtBiC,EAAEN,EAAEa,EAAEX,EAAEG,KAAkBJ,QAAQ,GAAG,WAAWC,EAAE,MAAM9B,EAAEmD,OAAOpD,GAAGW,MAAM,mDAAmD,oBAAoBV,EAAE,qBAAqB1F,OAAO8I,KAAKrD,GAAGsD,KAAK,MAAM,IAAIrD,GAAG,6EAA6E,OAAO+B,CAAC,CACzZ,SAASuB,EAAEvD,EAAEC,EAAEC,GAAG,GAAG,MAAMF,EAAE,OAAOA,EAAE,IAAI6B,EAAE,GAAGC,EAAE,EAAmD,OAAjDgB,EAAE9C,EAAE6B,EAAE,GAAG,IAAG,SAAS7B,GAAG,OAAOC,EAAEgC,KAAK/B,EAAEF,EAAE8B,IAAI,IAAUD,CAAC,CAAC,SAAS2B,EAAExD,GAAG,IAAI,IAAIA,EAAEyD,QAAQ,CAAC,IAAIxD,EAAED,EAAE0D,SAAQzD,EAAEA,KAAM0D,MAAK,SAAS1D,GAAM,IAAID,EAAEyD,UAAU,IAAIzD,EAAEyD,UAAQzD,EAAEyD,QAAQ,EAAEzD,EAAE0D,QAAQzD,EAAC,IAAE,SAASA,GAAM,IAAID,EAAEyD,UAAU,IAAIzD,EAAEyD,UAAQzD,EAAEyD,QAAQ,EAAEzD,EAAE0D,QAAQzD,EAAC,KAAI,IAAID,EAAEyD,UAAUzD,EAAEyD,QAAQ,EAAEzD,EAAE0D,QAAQzD,EAAE,CAAC,GAAG,IAAID,EAAEyD,QAAQ,OAAOzD,EAAE0D,QAAQE,QAAQ,MAAM5D,EAAE0D,OAAQ,CAC5Z,IAAIG,EAAE,CAACvC,QAAQ,MAAMwC,EAAE,CAACC,WAAW,MAAMC,EAAE,CAACC,uBAAuBJ,EAAEK,wBAAwBJ,EAAEK,kBAAkB9C,GAAG+C,EAAQC,SAAS,CAACC,IAAIf,EAAEgB,QAAQ,SAASvE,EAAEC,EAAEC,GAAGqD,EAAEvD,GAAE,WAAWC,EAAEuE,MAAMrE,KAAKtG,UAAU,GAAEqG,EAAE,EAAEuE,MAAM,SAASzE,GAAG,IAAIC,EAAE,EAAuB,OAArBsD,EAAEvD,GAAE,WAAWC,GAAG,IAAUA,CAAC,EAAEyE,QAAQ,SAAS1E,GAAG,OAAOuD,EAAEvD,GAAE,SAASA,GAAG,OAAOA,CAAC,KAAI,EAAE,EAAE2E,KAAK,SAAS3E,GAAG,IAAIwC,EAAExC,GAAG,MAAMW,MAAM,yEAAyE,OAAOX,CAAC,GAAGoE,EAAQQ,UAAU7E,EAAEqE,EAAQS,SAAShG,EACneuF,EAAQU,SAAS/F,EAAEqF,EAAQW,cAAcvE,EAAE4D,EAAQY,WAAWlG,EAAEsF,EAAQa,SAAS9F,EAAEiF,EAAQc,mDAAmDlB,EAC9II,EAAQe,aAAa,SAASnF,EAAEC,EAAEC,GAAG,GAAG,OAAOF,QAAG,IAASA,EAAE,MAAMW,MAAM,iFAAiFX,EAAE,KAAK,IAAI6B,EAAEhC,EAAE,CAAC,EAAEG,EAAEI,OAAO0B,EAAE9B,EAAEwB,IAAIO,EAAE/B,EAAEyB,IAAIO,EAAEhC,EAAEuC,OAAO,GAAG,MAAMtC,EAAE,CAAoE,QAAnE,IAASA,EAAEwB,MAAMM,EAAE9B,EAAEwB,IAAIO,EAAEX,EAAEC,cAAS,IAASrB,EAAEuB,MAAMM,EAAE,GAAG7B,EAAEuB,KAAQxB,EAAE5B,MAAM4B,EAAE5B,KAAKiE,aAAa,IAAIH,EAAElC,EAAE5B,KAAKiE,aAAa,IAAIF,KAAKlC,EAAEkB,EAAEc,KAAKhC,EAAEkC,KAAKZ,EAAEH,eAAee,KAAKN,EAAEM,QAAG,IAASlC,EAAEkC,SAAI,IAASD,EAAEA,EAAEC,GAAGlC,EAAEkC,GAAG,CAAC,IAAIA,EAAEtI,UAAUC,OAAO,EAAE,GAAG,IAAIqI,EAAEN,EAAE/D,SAASoC,OAAO,GAAG,EAAEiC,EAAE,CAACD,EAAEjB,MAAMkB,GACrf,IAAI,IAAIC,EAAE,EAAEA,EAAED,EAAEC,IAAIF,EAAEE,GAAGvI,UAAUuI,EAAE,GAAGP,EAAE/D,SAASoE,CAAC,CAAC,MAAM,CAACI,SAAS3D,EAAEP,KAAK4B,EAAE5B,KAAKoD,IAAIM,EAAEL,IAAIM,EAAE3B,MAAMyB,EAAEU,OAAOP,EAAE,EAAEoC,EAAQhL,cAAc,SAAS4G,GAAqK,OAAlKA,EAAE,CAACsC,SAASrD,EAAEmG,cAAcpF,EAAEqF,eAAerF,EAAEsF,aAAa,EAAEC,SAAS,KAAKC,SAAS,KAAKC,cAAc,KAAKC,YAAY,OAAQH,SAAS,CAACjD,SAAStD,EAAE2G,SAAS3F,GAAUA,EAAEwF,SAASxF,CAAC,EAAEoE,EAAQhK,cAAcwH,EAAEwC,EAAQwB,cAAc,SAAS5F,GAAG,IAAIC,EAAE2B,EAAEiE,KAAK,KAAK7F,GAAY,OAATC,EAAE7B,KAAK4B,EAASC,CAAC,EAAEmE,EAAQ0B,UAAU,WAAW,MAAM,CAACxE,QAAQ,KAAK,EAC9d8C,EAAQ2B,WAAW,SAAS/F,GAAG,MAAM,CAACsC,SAASpD,EAAE8G,OAAOhG,EAAE,EAAEoE,EAAQ6B,eAAezD,EAAE4B,EAAQ8B,KAAK,SAASlG,GAAG,MAAM,CAACsC,SAASjD,EAAE8G,SAAS,CAAC1C,SAAS,EAAEC,QAAQ1D,GAAGoG,MAAM5C,EAAE,EAAEY,EAAQiC,KAAK,SAASrG,EAAEC,GAAG,MAAM,CAACqC,SAASlD,EAAEhB,KAAK4B,EAAEsG,aAAQ,IAASrG,EAAE,KAAKA,EAAE,EAAEmE,EAAQmC,gBAAgB,SAASvG,GAAG,IAAIC,EAAE6D,EAAEC,WAAWD,EAAEC,WAAW,CAAC,EAAE,IAAI/D,GAAG,CAAC,QAAQ8D,EAAEC,WAAW9D,CAAC,CAAC,EAAEmE,EAAQoC,aAAa,WAAW,MAAM7F,MAAM,2DAA4D,EAC1cyD,EAAQqC,YAAY,SAASzG,EAAEC,GAAG,OAAO4D,EAAEvC,QAAQmF,YAAYzG,EAAEC,EAAE,EAAEmE,EAAQpK,WAAW,SAASgG,GAAG,OAAO6D,EAAEvC,QAAQtH,WAAWgG,EAAE,EAAEoE,EAAQsC,cAAc,WAAW,EAAEtC,EAAQuC,iBAAiB,SAAS3G,GAAG,OAAO6D,EAAEvC,QAAQqF,iBAAiB3G,EAAE,EAAEoE,EAAQ9J,UAAU,SAAS0F,EAAEC,GAAG,OAAO4D,EAAEvC,QAAQhH,UAAU0F,EAAEC,EAAE,EAAEmE,EAAQwC,MAAM,WAAW,OAAO/C,EAAEvC,QAAQsF,OAAO,EAAExC,EAAQyC,oBAAoB,SAAS7G,EAAEC,EAAEC,GAAG,OAAO2D,EAAEvC,QAAQuF,oBAAoB7G,EAAEC,EAAEC,EAAE,EAC7bkE,EAAQ0C,mBAAmB,SAAS9G,EAAEC,GAAG,OAAO4D,EAAEvC,QAAQwF,mBAAmB9G,EAAEC,EAAE,EAAEmE,EAAQ/J,gBAAgB,SAAS2F,EAAEC,GAAG,OAAO4D,EAAEvC,QAAQjH,gBAAgB2F,EAAEC,EAAE,EAAEmE,EAAQ2C,QAAQ,SAAS/G,EAAEC,GAAG,OAAO4D,EAAEvC,QAAQyF,QAAQ/G,EAAEC,EAAE,EAAEmE,EAAQ4C,WAAW,SAAShH,EAAEC,EAAEC,GAAG,OAAO2D,EAAEvC,QAAQ0F,WAAWhH,EAAEC,EAAEC,EAAE,EAAEkE,EAAQ6C,OAAO,SAASjH,GAAG,OAAO6D,EAAEvC,QAAQ2F,OAAOjH,EAAE,EAAEoE,EAAQ8C,SAAS,SAASlH,GAAG,OAAO6D,EAAEvC,QAAQ4F,SAASlH,EAAE,EAAEoE,EAAQ+C,qBAAqB,SAASnH,EAAEC,EAAEC,GAAG,OAAO2D,EAAEvC,QAAQ6F,qBAAqBnH,EAAEC,EAAEC,EAAE,EAC/ekE,EAAQgD,cAAc,WAAW,OAAOvD,EAAEvC,QAAQ8F,eAAe,EAAEhD,EAAQiD,QAAQ,yBCtBjFC,EAAOlD,QAAU,EAAjBkD,sBCMW,IAAIpF,EAAEqF,EAAQ,MAAwE,IAAI1I,EAAE,oBAAoBtE,OAAOiN,GAAGjN,OAAOiN,GAA1G,SAAWxH,EAAEC,GAAG,OAAOD,IAAIC,IAAI,IAAID,GAAG,EAAEA,IAAI,EAAEC,IAAID,IAAIA,GAAGC,IAAIA,CAAC,EAAiDnB,EAAEoD,EAAEiF,qBAAqBpI,EAAEmD,EAAE+E,OAAOjI,EAAEkD,EAAE5H,UAAU2E,EAAEiD,EAAE6E,QAAQ7H,EAAEgD,EAAEwE,cACrNtC,EAAQqD,iCAAiC,SAASzH,EAAEC,EAAEC,EAAEvB,EAAEqD,GAAG,IAAIF,EAAE/C,EAAE,MAAM,GAAG,OAAO+C,EAAER,QAAQ,CAAC,IAAIa,EAAE,CAACuF,UAAS,EAAGlJ,MAAM,MAAMsD,EAAER,QAAQa,CAAC,MAAMA,EAAEL,EAAER,QAAQQ,EAAE7C,GAAE,WAAW,SAASe,EAAEA,GAAG,IAAI8B,EAAE,CAAiB,GAAhBA,GAAE,EAAGD,EAAE7B,EAAEA,EAAErB,EAAEqB,QAAM,IAASgC,GAAGG,EAAEuF,SAAS,CAAC,IAAIzH,EAAEkC,EAAE3D,MAAM,GAAGwD,EAAE/B,EAAED,GAAG,OAAO+B,EAAE9B,CAAC,CAAC,OAAO8B,EAAE/B,CAAC,CAAK,GAAJC,EAAE8B,EAAKlD,EAAEgD,EAAE7B,GAAG,OAAOC,EAAE,IAAIC,EAAEvB,EAAEqB,GAAG,YAAG,IAASgC,GAAGA,EAAE/B,EAAEC,GAAUD,GAAE4B,EAAE7B,EAAS+B,EAAE7B,EAAC,CAAC,IAAS2B,EAAEE,EAAPD,GAAE,EAAOM,OAAE,IAASlC,EAAE,KAAKA,EAAE,MAAM,CAAC,WAAW,OAAOF,EAAEC,IAAI,EAAE,OAAOmC,OAAE,EAAO,WAAW,OAAOpC,EAAEoC,IAAI,EAAE,GAAE,CAACnC,EAAEC,EAAEvB,EAAEqD,IAAI,IAAIH,EAAE/C,EAAEkB,EAAE8B,EAAE,GAAGA,EAAE,IACnc,OAAhD9C,GAAE,WAAWmD,EAAEuF,UAAS,EAAGvF,EAAE3D,MAAMqD,CAAC,GAAE,CAACA,IAAI3C,EAAE2C,GAAUA,CAAC,iBCRtDyF,EAAOlD,QAAU,EAAjBkD","sources":["../../../../../../node_modules/react-redux/src/utils/react.ts","../../../../../../node_modules/react-redux/src/components/Context.ts","../../../../../../node_modules/react-redux/src/hooks/useReduxContext.ts","../../../../../../node_modules/react-redux/src/utils/react-is.ts","../../../../../../node_modules/react-redux/src/utils/useIsomorphicLayoutEffect.ts","../../../../../../node_modules/react-redux/src/utils/hoistStatics.ts","../../../../../../node_modules/react-redux/src/hooks/useStore.ts","../../../../../../node_modules/react-redux/src/hooks/useDispatch.ts","../../../../../../node_modules/react-redux/src/hooks/useSelector.ts","../../../../../../node_modules/react-redux/src/index.ts","../../../../../../node_modules/react-redux/src/components/connect.tsx","services/apiContacts.js","redux/authReduser.js","pages/RegisterPage/Register.jsx","../../../../../../node_modules/react/cjs/react.production.min.js","../../../../../../node_modules/react/index.js","../../../../../../node_modules/use-sync-external-store/cjs/use-sync-external-store-with-selector.production.min.js","../../../../../../node_modules/use-sync-external-store/with-selector.js"],"sourcesContent":["import * as ReactOriginal from 'react'\nimport type * as ReactNamespace from 'react'\n\nexport const React: typeof ReactNamespace =\n  // prettier-ignore\n  // @ts-ignore\n  'default' in ReactOriginal ? ReactOriginal['default'] : ReactOriginal as any\n","import type { Context } from 'react'\nimport { React } from '../utils/react'\nimport type { Action, Store, UnknownAction } from 'redux'\nimport type { Subscription } from '../utils/Subscription'\nimport type { ProviderProps } from './Provider'\n\nexport interface ReactReduxContextValue<\n  SS = any,\n  A extends Action<string> = UnknownAction\n> extends Pick<ProviderProps, 'stabilityCheck' | 'identityFunctionCheck'> {\n  store: Store<SS, A>\n  subscription: Subscription\n  getServerState?: () => SS\n}\n\nconst ContextKey = Symbol.for(`react-redux-context`)\nconst gT: {\n  [ContextKey]?: Map<\n    typeof React.createContext,\n    Context<ReactReduxContextValue | null>\n  >\n} = (\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */ {}\n) as any\n\nfunction getContext(): Context<ReactReduxContextValue | null> {\n  if (!React.createContext) return {} as any\n\n  const contextMap = (gT[ContextKey] ??= new Map<\n    typeof React.createContext,\n    Context<ReactReduxContextValue | null>\n  >())\n  let realContext = contextMap.get(React.createContext)\n  if (!realContext) {\n    realContext = React.createContext<ReactReduxContextValue | null>(\n      null as any,\n    )\n    if (process.env.NODE_ENV !== 'production') {\n      realContext.displayName = 'ReactRedux'\n    }\n    contextMap.set(React.createContext, realContext)\n  }\n  return realContext\n}\n\nexport const ReactReduxContext = /*#__PURE__*/ getContext()\n\nexport type ReactReduxContextInstance = typeof ReactReduxContext\n\nexport default ReactReduxContext\n","import { React } from '../utils/react'\nimport { ReactReduxContext } from '../components/Context'\nimport type { ReactReduxContextValue } from '../components/Context'\n\n/**\n * Hook factory, which creates a `useReduxContext` hook bound to a given context. This is a low-level\n * hook that you should usually not need to call directly.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useReduxContext` hook bound to the specified context.\n */\nexport function createReduxContextHook(context = ReactReduxContext) {\n  return function useReduxContext(): ReactReduxContextValue {\n    const contextValue = React.useContext(context)\n\n    if (process.env.NODE_ENV !== 'production' && !contextValue) {\n      throw new Error(\n        'could not find react-redux context value; please ensure the component is wrapped in a <Provider>',\n      )\n    }\n\n    return contextValue!\n  }\n}\n\n/**\n * A hook to access the value of the `ReactReduxContext`. This is a low-level\n * hook that you should usually not need to call directly.\n *\n * @returns {any} the value of the `ReactReduxContext`\n *\n * @example\n *\n * import React from 'react'\n * import { useReduxContext } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const { store } = useReduxContext()\n *   return <div>{store.getState()}</div>\n * }\n */\nexport const useReduxContext = /*#__PURE__*/ createReduxContextHook()\n","import type { ElementType, MemoExoticComponent, ReactElement } from 'react'\n\n// Directly ported from:\n// https://unpkg.com/browse/react-is@18.3.0-canary-ee68446ff-20231115/cjs/react-is.production.js\n// It's very possible this could change in the future, but given that\n// we only use these in `connect`, this is a low priority.\n\nconst REACT_ELEMENT_TYPE = Symbol.for('react.element')\nconst REACT_PORTAL_TYPE = Symbol.for('react.portal')\nconst REACT_FRAGMENT_TYPE = Symbol.for('react.fragment')\nconst REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode')\nconst REACT_PROFILER_TYPE = Symbol.for('react.profiler')\nconst REACT_PROVIDER_TYPE = Symbol.for('react.provider')\nconst REACT_CONTEXT_TYPE = Symbol.for('react.context')\nconst REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context')\nconst REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref')\nconst REACT_SUSPENSE_TYPE = Symbol.for('react.suspense')\nconst REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list')\nconst REACT_MEMO_TYPE = Symbol.for('react.memo')\nconst REACT_LAZY_TYPE = Symbol.for('react.lazy')\nconst REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen')\nconst REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference')\n\nexport const ForwardRef = REACT_FORWARD_REF_TYPE\nexport const Memo = REACT_MEMO_TYPE\n\nexport function isValidElementType(type: any): type is ElementType {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n  if (\n    type === REACT_FRAGMENT_TYPE ||\n    type === REACT_PROFILER_TYPE ||\n    type === REACT_STRICT_MODE_TYPE ||\n    type === REACT_SUSPENSE_TYPE ||\n    type === REACT_SUSPENSE_LIST_TYPE ||\n    type === REACT_OFFSCREEN_TYPE\n  ) {\n    return true\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (\n      type.$$typeof === REACT_LAZY_TYPE ||\n      type.$$typeof === REACT_MEMO_TYPE ||\n      type.$$typeof === REACT_PROVIDER_TYPE ||\n      type.$$typeof === REACT_CONTEXT_TYPE ||\n      type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n      // types supported by any Flight configuration anywhere since\n      // we don't know which Flight build this will end up being used\n      // with.\n      type.$$typeof === REACT_CLIENT_REFERENCE ||\n      type.getModuleId !== undefined\n    ) {\n      return true\n    }\n  }\n\n  return false\n}\n\nfunction typeOf(object: any): symbol | undefined {\n  if (typeof object === 'object' && object !== null) {\n    const $$typeof = object.$$typeof\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE: {\n        const type = object.type\n\n        switch (type) {\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n          case REACT_SUSPENSE_LIST_TYPE:\n            return type\n\n          default: {\n            const $$typeofType = type && type.$$typeof\n\n            switch ($$typeofType) {\n              case REACT_SERVER_CONTEXT_TYPE:\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType\n\n              default:\n                return $$typeof\n            }\n          }\n        }\n      }\n\n      case REACT_PORTAL_TYPE: {\n        return $$typeof\n      }\n    }\n  }\n\n  return undefined\n}\n\nexport function isContextConsumer(object: any): object is ReactElement {\n  return typeOf(object) === REACT_CONTEXT_TYPE\n}\n\nexport function isMemo(object: any): object is MemoExoticComponent<any> {\n  return typeOf(object) === REACT_MEMO_TYPE\n}\n","import { React } from '../utils/react'\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n\n// Matches logic in React's `shared/ExecutionEnvironment` file\nexport const canUseDOM = !!(\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n)\n\nexport const useIsomorphicLayoutEffect = canUseDOM\n  ? React.useLayoutEffect\n  : React.useEffect\n","// Copied directly from:\n// https://github.com/mridgway/hoist-non-react-statics/blob/main/src/index.js\n// https://unpkg.com/browse/@types/hoist-non-react-statics@3.3.1/index.d.ts\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nimport type * as React from 'react'\nimport { ForwardRef, Memo, isMemo } from '../utils/react-is'\n\nconst REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true,\n} as const\n\nconst KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true,\n} as const\n\nconst FORWARD_REF_STATICS = {\n  $$typeof: true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n} as const\n\nconst MEMO_STATICS = {\n  $$typeof: true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true,\n} as const\n\nconst TYPE_STATICS = {\n  [ForwardRef]: FORWARD_REF_STATICS,\n  [Memo]: MEMO_STATICS,\n} as const\n\nfunction getStatics(component: any) {\n  // React v16.11 and below\n  if (isMemo(component)) {\n    return MEMO_STATICS\n  }\n\n  // React v16.12 and above\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS\n}\n\nexport type NonReactStatics<\n  S extends React.ComponentType<any>,\n  C extends {\n    [key: string]: true\n  } = {}\n> = {\n  [key in Exclude<\n    keyof S,\n    S extends React.MemoExoticComponent<any>\n      ? keyof typeof MEMO_STATICS | keyof C\n      : S extends React.ForwardRefExoticComponent<any>\n      ? keyof typeof FORWARD_REF_STATICS | keyof C\n      : keyof typeof REACT_STATICS | keyof typeof KNOWN_STATICS | keyof C\n  >]: S[key]\n}\n\nconst defineProperty = Object.defineProperty\nconst getOwnPropertyNames = Object.getOwnPropertyNames\nconst getOwnPropertySymbols = Object.getOwnPropertySymbols\nconst getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor\nconst getPrototypeOf = Object.getPrototypeOf\nconst objectPrototype = Object.prototype\n\nexport default function hoistNonReactStatics<\n  T extends React.ComponentType<any>,\n  S extends React.ComponentType<any>,\n  C extends {\n    [key: string]: true\n  } = {}\n>(targetComponent: T, sourceComponent: S): T & NonReactStatics<S, C> {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n\n    if (objectPrototype) {\n      const inheritedComponent = getPrototypeOf(sourceComponent)\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent)\n      }\n    }\n\n    let keys: (string | symbol)[] = getOwnPropertyNames(sourceComponent)\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent))\n    }\n\n    const targetStatics = getStatics(targetComponent)\n    const sourceStatics = getStatics(sourceComponent)\n\n    for (let i = 0; i < keys.length; ++i) {\n      const key = keys[i]\n      if (\n        !KNOWN_STATICS[key as keyof typeof KNOWN_STATICS] &&\n        !(sourceStatics && sourceStatics[key as keyof typeof sourceStatics]) &&\n        !(targetStatics && targetStatics[key as keyof typeof targetStatics])\n      ) {\n        const descriptor = getOwnPropertyDescriptor(sourceComponent, key)\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor!)\n        } catch (e) {\n          // ignore\n        }\n      }\n    }\n  }\n\n  return targetComponent as any\n}\n","import type { Context } from 'react'\nimport type { Action, Store } from 'redux'\nimport type { ReactReduxContextValue } from '../components/Context'\nimport { ReactReduxContext } from '../components/Context'\nimport {\n  createReduxContextHook,\n  useReduxContext as useDefaultReduxContext,\n} from './useReduxContext'\n\n/**\n * Represents a type that extracts the action type from a given Redux store.\n *\n * @template StoreType - The specific type of the Redux store.\n *\n * @since 9.1.0\n * @internal\n */\nexport type ExtractStoreActionType<StoreType extends Store> =\n  StoreType extends Store<any, infer ActionType> ? ActionType : never\n\n/**\n * Represents a custom hook that provides access to the Redux store.\n *\n * @template StoreType - The specific type of the Redux store that gets returned.\n *\n * @since 9.1.0\n * @public\n */\nexport interface UseStore<StoreType extends Store> {\n  /**\n   * Returns the Redux store instance.\n   *\n   * @returns The Redux store instance.\n   */\n  (): StoreType\n\n  /**\n   * Returns the Redux store instance with specific state and action types.\n   *\n   * @returns The Redux store with the specified state and action types.\n   *\n   * @template StateType - The specific type of the state used in the store.\n   * @template ActionType - The specific type of the actions used in the store.\n   */\n  <\n    StateType extends ReturnType<StoreType['getState']> = ReturnType<\n      StoreType['getState']\n    >,\n    ActionType extends Action = ExtractStoreActionType<Store>\n  >(): Store<StateType, ActionType>\n\n  /**\n   * Creates a \"pre-typed\" version of {@linkcode useStore useStore}\n   * where the type of the Redux `store` is predefined.\n   *\n   * This allows you to set the `store` type once, eliminating the need to\n   * specify it with every {@linkcode useStore useStore} call.\n   *\n   * @returns A pre-typed `useStore` with the store type already defined.\n   *\n   * @example\n   * ```ts\n   * export const useAppStore = useStore.withTypes<AppStore>()\n   * ```\n   *\n   * @template OverrideStoreType - The specific type of the Redux store that gets returned.\n   *\n   * @since 9.1.0\n   */\n  withTypes: <\n    OverrideStoreType extends StoreType\n  >() => UseStore<OverrideStoreType>\n}\n\n/**\n * Hook factory, which creates a `useStore` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useStore` hook bound to the specified context.\n */\nexport function createStoreHook<\n  StateType = unknown,\n  ActionType extends Action = Action\n>(\n  // @ts-ignore\n  context?: Context<ReactReduxContextValue<\n    StateType,\n    ActionType\n  > | null> = ReactReduxContext\n) {\n  const useReduxContext =\n    context === ReactReduxContext\n      ? useDefaultReduxContext\n      : // @ts-ignore\n        createReduxContextHook(context)\n  const useStore = () => {\n    const { store } = useReduxContext()\n    return store\n  }\n\n  Object.assign(useStore, {\n    withTypes: () => useStore,\n  })\n\n  return useStore as UseStore<Store<StateType, ActionType>>\n}\n\n/**\n * A hook to access the redux store.\n *\n * @returns {any} the redux store\n *\n * @example\n *\n * import React from 'react'\n * import { useStore } from 'react-redux'\n *\n * export const ExampleComponent = () => {\n *   const store = useStore()\n *   return <div>{store.getState()}</div>\n * }\n */\nexport const useStore = /*#__PURE__*/ createStoreHook()\n","import type { Context } from 'react'\nimport type { Action, Dispatch, UnknownAction } from 'redux'\n\nimport type { ReactReduxContextValue } from '../components/Context'\nimport { ReactReduxContext } from '../components/Context'\nimport { createStoreHook, useStore as useDefaultStore } from './useStore'\n\n/**\n * Represents a custom hook that provides a dispatch function\n * from the Redux store.\n *\n * @template DispatchType - The specific type of the dispatch function.\n *\n * @since 9.1.0\n * @public\n */\nexport interface UseDispatch<\n  DispatchType extends Dispatch<UnknownAction> = Dispatch<UnknownAction>\n> {\n  /**\n   * Returns the dispatch function from the Redux store.\n   *\n   * @returns The dispatch function from the Redux store.\n   *\n   * @template AppDispatch - The specific type of the dispatch function.\n   */\n  <AppDispatch extends DispatchType = DispatchType>(): AppDispatch\n\n  /**\n   * Creates a \"pre-typed\" version of {@linkcode useDispatch useDispatch}\n   * where the type of the `dispatch` function is predefined.\n   *\n   * This allows you to set the `dispatch` type once, eliminating the need to\n   * specify it with every {@linkcode useDispatch useDispatch} call.\n   *\n   * @returns A pre-typed `useDispatch` with the dispatch type already defined.\n   *\n   * @example\n   * ```ts\n   * export const useAppDispatch = useDispatch.withTypes<AppDispatch>()\n   * ```\n   *\n   * @template OverrideDispatchType - The specific type of the dispatch function.\n   *\n   * @since 9.1.0\n   */\n  withTypes: <\n    OverrideDispatchType extends DispatchType\n  >() => UseDispatch<OverrideDispatchType>\n}\n\n/**\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useDispatch` hook bound to the specified context.\n */\nexport function createDispatchHook<\n  StateType = unknown,\n  ActionType extends Action = UnknownAction\n>(\n  // @ts-ignore\n  context?: Context<ReactReduxContextValue<\n    StateType,\n    ActionType\n  > | null> = ReactReduxContext\n) {\n  const useStore =\n    context === ReactReduxContext ? useDefaultStore : createStoreHook(context)\n\n  const useDispatch = () => {\n    const store = useStore()\n    return store.dispatch\n  }\n\n  Object.assign(useDispatch, {\n    withTypes: () => useDispatch,\n  })\n\n  return useDispatch as UseDispatch<Dispatch<ActionType>>\n}\n\n/**\n * A hook to access the redux `dispatch` function.\n *\n * @returns {any|function} redux store's `dispatch` function\n *\n * @example\n *\n * import React, { useCallback } from 'react'\n * import { useDispatch } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const dispatch = useDispatch()\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\n *   return (\n *     <div>\n *       <span>{value}</span>\n *       <button onClick={increaseCounter}>Increase counter</button>\n *     </div>\n *   )\n * }\n */\nexport const useDispatch = /*#__PURE__*/ createDispatchHook()\n","//import * as React from 'react'\nimport { React } from '../utils/react'\n\nimport type { ReactReduxContextValue } from '../components/Context'\nimport { ReactReduxContext } from '../components/Context'\nimport type { EqualityFn, NoInfer } from '../types'\nimport type { uSESWS } from '../utils/useSyncExternalStore'\nimport { notInitialized } from '../utils/useSyncExternalStore'\nimport {\n  createReduxContextHook,\n  useReduxContext as useDefaultReduxContext,\n} from './useReduxContext'\n\n/**\n * The frequency of development mode checks.\n *\n * @since 8.1.0\n * @internal\n */\nexport type DevModeCheckFrequency = 'never' | 'once' | 'always'\n\n/**\n * Represents the configuration for development mode checks.\n *\n * @since 9.0.0\n * @internal\n */\nexport interface DevModeChecks {\n  /**\n   * Overrides the global stability check for the selector.\n   * - `once` - Run only the first time the selector is called.\n   * - `always` - Run every time the selector is called.\n   * - `never` - Never run the stability check.\n   *\n   * @default 'once'\n   *\n   * @since 8.1.0\n   */\n  stabilityCheck: DevModeCheckFrequency\n\n  /**\n   * Overrides the global identity function check for the selector.\n   * - `once` - Run only the first time the selector is called.\n   * - `always` - Run every time the selector is called.\n   * - `never` - Never run the identity function check.\n   *\n   * **Note**: Previously referred to as `noopCheck`.\n   *\n   * @default 'once'\n   *\n   * @since 9.0.0\n   */\n  identityFunctionCheck: DevModeCheckFrequency\n}\n\nexport interface UseSelectorOptions<Selected = unknown> {\n  equalityFn?: EqualityFn<Selected>\n\n  /**\n   * `useSelector` performs additional checks in development mode to help\n   * identify and warn about potential issues in selector behavior. This\n   * option allows you to customize the behavior of these checks per selector.\n   *\n   * @since 9.0.0\n   */\n  devModeChecks?: Partial<DevModeChecks>\n}\n\n/**\n * Represents a custom hook that allows you to extract data from the\n * Redux store state, using a selector function. The selector function\n * takes the current state as an argument and returns a part of the state\n * or some derived data. The hook also supports an optional equality\n * function or options object to customize its behavior.\n *\n * @template StateType - The specific type of state this hook operates on.\n *\n * @public\n */\nexport interface UseSelector<StateType = unknown> {\n  /**\n   * A function that takes a selector function as its first argument.\n   * The selector function is responsible for selecting a part of\n   * the Redux store's state or computing derived data.\n   *\n   * @param selector - A function that receives the current state and returns a part of the state or some derived data.\n   * @param equalityFnOrOptions - An optional equality function or options object for customizing the behavior of the selector.\n   * @returns The selected part of the state or derived data.\n   *\n   * @template TState - The specific type of state this hook operates on.\n   * @template Selected - The type of the value that the selector function will return.\n   */\n  <TState extends StateType = StateType, Selected = unknown>(\n    selector: (state: TState) => Selected,\n    equalityFnOrOptions?: EqualityFn<Selected> | UseSelectorOptions<Selected>\n  ): Selected\n\n  /**\n   * Creates a \"pre-typed\" version of {@linkcode useSelector useSelector}\n   * where the `state` type is predefined.\n   *\n   * This allows you to set the `state` type once, eliminating the need to\n   * specify it with every {@linkcode useSelector useSelector} call.\n   *\n   * @returns A pre-typed `useSelector` with the state type already defined.\n   *\n   * @example\n   * ```ts\n   * export const useAppSelector = useSelector.withTypes<RootState>()\n   * ```\n   *\n   * @template OverrideStateType - The specific type of state this hook operates on.\n   *\n   * @since 9.1.0\n   */\n  withTypes: <\n    OverrideStateType extends StateType\n  >() => UseSelector<OverrideStateType>\n}\n\nlet useSyncExternalStoreWithSelector = notInitialized as uSESWS\nexport const initializeUseSelector = (fn: uSESWS) => {\n  useSyncExternalStoreWithSelector = fn\n}\n\nconst refEquality: EqualityFn<any> = (a, b) => a === b\n\n/**\n * Hook factory, which creates a `useSelector` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useSelector` hook bound to the specified context.\n */\nexport function createSelectorHook(\n  context: React.Context<ReactReduxContextValue<\n    any,\n    any\n  > | null> = ReactReduxContext,\n): UseSelector {\n  const useReduxContext =\n    context === ReactReduxContext\n      ? useDefaultReduxContext\n      : createReduxContextHook(context)\n\n  const useSelector = <TState, Selected extends unknown>(\n    selector: (state: TState) => Selected,\n    equalityFnOrOptions:\n      | EqualityFn<NoInfer<Selected>>\n      | UseSelectorOptions<NoInfer<Selected>> = {}\n  ): Selected => {\n    const { equalityFn = refEquality, devModeChecks = {} } =\n      typeof equalityFnOrOptions === 'function'\n        ? { equalityFn: equalityFnOrOptions }\n        : equalityFnOrOptions\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`)\n      }\n      if (typeof selector !== 'function') {\n        throw new Error(`You must pass a function as a selector to useSelector`)\n      }\n      if (typeof equalityFn !== 'function') {\n        throw new Error(\n          `You must pass a function as an equality function to useSelector`,\n        )\n      }\n    }\n\n    const {\n      store,\n      subscription,\n      getServerState,\n      stabilityCheck,\n      identityFunctionCheck,\n    } = useReduxContext()\n\n    const firstRun = React.useRef(true)\n\n    const wrappedSelector = React.useCallback<typeof selector>(\n      {\n        [selector.name](state: TState) {\n          const selected = selector(state)\n          if (process.env.NODE_ENV !== 'production') {\n            const {\n              identityFunctionCheck: finalIdentityFunctionCheck,\n              stabilityCheck: finalStabilityCheck,\n            } = {\n              stabilityCheck,\n              identityFunctionCheck,\n              ...devModeChecks,\n            }\n            if (\n              finalStabilityCheck === 'always' ||\n              (finalStabilityCheck === 'once' && firstRun.current)\n            ) {\n              const toCompare = selector(state)\n              if (!equalityFn(selected, toCompare)) {\n                let stack: string | undefined = undefined\n                try {\n                  throw new Error()\n                } catch (e) {\n                  // eslint-disable-next-line no-extra-semi\n                  ;({ stack } = e as Error)\n                }\n                console.warn(\n                  'Selector ' +\n                    (selector.name || 'unknown') +\n                    ' returned a different result when called with the same parameters. This can lead to unnecessary rerenders.' +\n                    '\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization',\n                  {\n                    state,\n                    selected,\n                    selected2: toCompare,\n                    stack,\n                  },\n                )\n              }\n            }\n            if (\n              finalIdentityFunctionCheck === 'always' ||\n              (finalIdentityFunctionCheck === 'once' && firstRun.current)\n            ) {\n              // @ts-ignore\n              if (selected === state) {\n                let stack: string | undefined = undefined\n                try {\n                  throw new Error()\n                } catch (e) {\n                  // eslint-disable-next-line no-extra-semi\n                  ;({ stack } = e as Error)\n                }\n                console.warn(\n                  'Selector ' +\n                    (selector.name || 'unknown') +\n                    ' returned the root state when called. This can lead to unnecessary rerenders.' +\n                    '\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.',\n                  { stack },\n                )\n              }\n            }\n            if (firstRun.current) firstRun.current = false\n          }\n          return selected\n        },\n      }[selector.name],\n      [selector, stabilityCheck, devModeChecks.stabilityCheck],\n    )\n\n    const selectedState = useSyncExternalStoreWithSelector(\n      subscription.addNestedSub,\n      store.getState,\n      getServerState || store.getState,\n      wrappedSelector,\n      equalityFn,\n    )\n\n    React.useDebugValue(selectedState)\n\n    return selectedState\n  }\n\n  Object.assign(useSelector, {\n    withTypes: () => useSelector,\n  })\n\n  return useSelector as UseSelector\n}\n\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\nexport const useSelector = /*#__PURE__*/ createSelectorHook()\n","// The primary entry point assumes we are working with React 18, and thus have\n// useSyncExternalStore available. We can import that directly from React itself.\n// The useSyncExternalStoreWithSelector has to be imported, but we can use the\n// non-shim version. This shaves off the byte size of the shim.\n\nimport * as React from 'react'\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector.js'\n\nimport { initializeUseSelector } from './hooks/useSelector'\nimport { initializeConnect } from './components/connect'\n\ninitializeUseSelector(useSyncExternalStoreWithSelector)\ninitializeConnect(React.useSyncExternalStore)\n\nexport * from './exports'\n","/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */\nimport type { ComponentType } from 'react'\nimport { React } from '../utils/react'\nimport { isValidElementType, isContextConsumer } from '../utils/react-is'\n\nimport type { Store } from 'redux'\n\nimport type {\n  ConnectedComponent,\n  InferableComponentEnhancer,\n  InferableComponentEnhancerWithProps,\n  ResolveThunks,\n  DispatchProp,\n  ConnectPropsMaybeWithoutContext,\n} from '../types'\n\nimport type {\n  MapStateToPropsParam,\n  MapDispatchToPropsParam,\n  MergeProps,\n  MapDispatchToPropsNonObject,\n  SelectorFactoryOptions,\n} from '../connect/selectorFactory'\nimport defaultSelectorFactory from '../connect/selectorFactory'\nimport { mapDispatchToPropsFactory } from '../connect/mapDispatchToProps'\nimport { mapStateToPropsFactory } from '../connect/mapStateToProps'\nimport { mergePropsFactory } from '../connect/mergeProps'\n\nimport type { Subscription } from '../utils/Subscription'\nimport { createSubscription } from '../utils/Subscription'\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect'\nimport shallowEqual from '../utils/shallowEqual'\nimport hoistStatics from '../utils/hoistStatics'\nimport warning from '../utils/warning'\n\nimport type {\n  ReactReduxContextValue,\n  ReactReduxContextInstance,\n} from './Context'\nimport { ReactReduxContext } from './Context'\n\nimport type { uSES } from '../utils/useSyncExternalStore'\nimport { notInitialized } from '../utils/useSyncExternalStore'\n\nlet useSyncExternalStore = notInitialized as uSES\nexport const initializeConnect = (fn: uSES) => {\n  useSyncExternalStore = fn\n}\n\n// Define some constant arrays just to avoid re-creating these\nconst EMPTY_ARRAY: [unknown, number] = [null, 0]\nconst NO_SUBSCRIPTION_ARRAY = [null, null]\n\n// Attempts to stringify whatever not-really-a-component value we were given\n// for logging in an error message\nconst stringifyComponent = (Comp: unknown) => {\n  try {\n    return JSON.stringify(Comp)\n  } catch (err) {\n    return String(Comp)\n  }\n}\n\ntype EffectFunc = (...args: any[]) => void | ReturnType<React.EffectCallback>\n\n// This is \"just\" a `useLayoutEffect`, but with two modifications:\n// - we need to fall back to `useEffect` in SSR to avoid annoying warnings\n// - we extract this to a separate function to avoid closing over values\n//   and causing memory leaks\nfunction useIsomorphicLayoutEffectWithArgs(\n  effectFunc: EffectFunc,\n  effectArgs: any[],\n  dependencies?: React.DependencyList,\n) {\n  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies)\n}\n\n// Effect callback, extracted: assign the latest props values to refs for later usage\nfunction captureWrapperProps(\n  lastWrapperProps: React.MutableRefObject<unknown>,\n  lastChildProps: React.MutableRefObject<unknown>,\n  renderIsScheduled: React.MutableRefObject<boolean>,\n  wrapperProps: unknown,\n  // actualChildProps: unknown,\n  childPropsFromStoreUpdate: React.MutableRefObject<unknown>,\n  notifyNestedSubs: () => void,\n) {\n  // We want to capture the wrapper props and child props we used for later comparisons\n  lastWrapperProps.current = wrapperProps\n  renderIsScheduled.current = false\n\n  // If the render was from a store update, clear out that reference and cascade the subscriber update\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null\n    notifyNestedSubs()\n  }\n}\n\n// Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,\n// check for updates after dispatched actions, and trigger re-renders.\nfunction subscribeUpdates(\n  shouldHandleStateChanges: boolean,\n  store: Store,\n  subscription: Subscription,\n  childPropsSelector: (state: unknown, props: unknown) => unknown,\n  lastWrapperProps: React.MutableRefObject<unknown>,\n  lastChildProps: React.MutableRefObject<unknown>,\n  renderIsScheduled: React.MutableRefObject<boolean>,\n  isMounted: React.MutableRefObject<boolean>,\n  childPropsFromStoreUpdate: React.MutableRefObject<unknown>,\n  notifyNestedSubs: () => void,\n  // forceComponentUpdateDispatch: React.Dispatch<any>,\n  additionalSubscribeListener: () => void,\n) {\n  // If we're not subscribed to the store, nothing to do here\n  if (!shouldHandleStateChanges) return () => {}\n\n  // Capture values for checking if and when this component unmounts\n  let didUnsubscribe = false\n  let lastThrownError: Error | null = null\n\n  // We'll run this callback every time a store subscription update propagates to this component\n  const checkForUpdates = () => {\n    if (didUnsubscribe || !isMounted.current) {\n      // Don't run stale listeners.\n      // Redux doesn't guarantee unsubscriptions happen until next dispatch.\n      return\n    }\n\n    // TODO We're currently calling getState ourselves here, rather than letting `uSES` do it\n    const latestStoreState = store.getState()\n\n    let newChildProps, error\n    try {\n      // Actually run the selector with the most recent store state and wrapper props\n      // to determine what the child props should be\n      newChildProps = childPropsSelector(\n        latestStoreState,\n        lastWrapperProps.current,\n      )\n    } catch (e) {\n      error = e\n      lastThrownError = e as Error | null\n    }\n\n    if (!error) {\n      lastThrownError = null\n    }\n\n    // If the child props haven't changed, nothing to do here - cascade the subscription update\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs()\n      }\n    } else {\n      // Save references to the new child props.  Note that we track the \"child props from store update\"\n      // as a ref instead of a useState/useReducer because we need a way to determine if that value has\n      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without\n      // forcing another re-render, which we don't want.\n      lastChildProps.current = newChildProps\n      childPropsFromStoreUpdate.current = newChildProps\n      renderIsScheduled.current = true\n\n      // TODO This is hacky and not how `uSES` is meant to be used\n      // Trigger the React `useSyncExternalStore` subscriber\n      additionalSubscribeListener()\n    }\n  }\n\n  // Actually subscribe to the nearest connected ancestor (or store)\n  subscription.onStateChange = checkForUpdates\n  subscription.trySubscribe()\n\n  // Pull data from the store after first render in case the store has\n  // changed since we began.\n  checkForUpdates()\n\n  const unsubscribeWrapper = () => {\n    didUnsubscribe = true\n    subscription.tryUnsubscribe()\n    subscription.onStateChange = null\n\n    if (lastThrownError) {\n      // It's possible that we caught an error due to a bad mapState function, but the\n      // parent re-rendered without this component and we're about to unmount.\n      // This shouldn't happen as long as we do top-down subscriptions correctly, but\n      // if we ever do those wrong, this throw will surface the error in our tests.\n      // In that case, throw the error from here so it doesn't get lost.\n      throw lastThrownError\n    }\n  }\n\n  return unsubscribeWrapper\n}\n\n// Reducer initial state creation for our update reducer\nconst initStateUpdates = () => EMPTY_ARRAY\n\nexport interface ConnectProps {\n  /** A custom Context instance that the component can use to access the store from an alternate Provider using that same Context instance */\n  context?: ReactReduxContextInstance\n  /** A Redux store instance to be used for subscriptions instead of the store from a Provider */\n  store?: Store\n}\n\ninterface InternalConnectProps extends ConnectProps {\n  reactReduxForwardedRef?: React.ForwardedRef<unknown>\n}\n\nfunction strictEqual(a: unknown, b: unknown) {\n  return a === b\n}\n\n/**\n * Infers the type of props that a connector will inject into a component.\n */\nexport type ConnectedProps<TConnector> =\n  TConnector extends InferableComponentEnhancerWithProps<\n    infer TInjectedProps,\n    any\n  >\n    ? unknown extends TInjectedProps\n      ? TConnector extends InferableComponentEnhancer<infer TInjectedProps>\n        ? TInjectedProps\n        : never\n      : TInjectedProps\n    : never\n\nexport interface ConnectOptions<\n  State = unknown,\n  TStateProps = {},\n  TOwnProps = {},\n  TMergedProps = {}\n> {\n  forwardRef?: boolean\n  context?: typeof ReactReduxContext\n  areStatesEqual?: (\n    nextState: State,\n    prevState: State,\n    nextOwnProps: TOwnProps,\n    prevOwnProps: TOwnProps\n  ) => boolean\n\n  areOwnPropsEqual?: (\n    nextOwnProps: TOwnProps,\n    prevOwnProps: TOwnProps\n  ) => boolean\n\n  areStatePropsEqual?: (\n    nextStateProps: TStateProps,\n    prevStateProps: TStateProps\n  ) => boolean\n  areMergedPropsEqual?: (\n    nextMergedProps: TMergedProps,\n    prevMergedProps: TMergedProps\n  ) => boolean\n}\n\n/**\n * Connects a React component to a Redux store.\n *\n * - Without arguments, just wraps the component, without changing the behavior / props\n *\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\n * is to override ownProps (as stated in the docs), so what remains is everything that's\n * not a state or dispatch prop\n *\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\n * should be valid component props, because it depends on mergeProps implementation.\n * As such, it is the user's responsibility to extend ownProps interface from state or\n * dispatch props or both when applicable\n *\n * @param mapStateToProps\n * @param mapDispatchToProps\n * @param mergeProps\n * @param options\n */\nexport interface Connect<DefaultState = unknown> {\n  // tslint:disable:no-unnecessary-generics\n  (): InferableComponentEnhancer<DispatchProp>\n\n  /** mapState only */\n  <TStateProps = {}, no_dispatch = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>\n  ): InferableComponentEnhancerWithProps<TStateProps & DispatchProp, TOwnProps>\n\n  /** mapDispatch only (as a function) */\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>\n  ): InferableComponentEnhancerWithProps<TDispatchProps, TOwnProps>\n\n  /** mapDispatch only (as an object) */\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>\n  ): InferableComponentEnhancerWithProps<\n    ResolveThunks<TDispatchProps>,\n    TOwnProps\n  >\n\n  /** mapState and mapDispatch (as a function)*/\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>\n  ): InferableComponentEnhancerWithProps<\n    TStateProps & TDispatchProps,\n    TOwnProps\n  >\n\n  /** mapState and mapDispatch (nullish) */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: null | undefined\n  ): InferableComponentEnhancerWithProps<TStateProps, TOwnProps>\n\n  /** mapState and mapDispatch (as an object) */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>\n  ): InferableComponentEnhancerWithProps<\n    TStateProps & ResolveThunks<TDispatchProps>,\n    TOwnProps\n  >\n\n  /** mergeProps only */\n  <no_state = {}, no_dispatch = {}, TOwnProps = {}, TMergedProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: null | undefined,\n    mergeProps: MergeProps<undefined, DispatchProp, TOwnProps, TMergedProps>\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\n\n  /** mapState and mergeProps */\n  <\n    TStateProps = {},\n    no_dispatch = {},\n    TOwnProps = {},\n    TMergedProps = {},\n    State = DefaultState\n  >(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: null | undefined,\n    mergeProps: MergeProps<TStateProps, DispatchProp, TOwnProps, TMergedProps>\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\n\n  /** mapDispatch (as a object) and mergeProps */\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}, TMergedProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    mergeProps: MergeProps<undefined, TDispatchProps, TOwnProps, TMergedProps>\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\n\n  /** mapState and options */\n  <TStateProps = {}, no_dispatch = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: null | undefined,\n    mergeProps: null | undefined,\n    options: ConnectOptions<State, TStateProps, TOwnProps>\n  ): InferableComponentEnhancerWithProps<DispatchProp & TStateProps, TOwnProps>\n\n  /** mapDispatch (as a function) and options */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\n    mergeProps: null | undefined,\n    options: ConnectOptions<{}, TStateProps, TOwnProps>\n  ): InferableComponentEnhancerWithProps<TDispatchProps, TOwnProps>\n\n  /** mapDispatch (as an object) and options*/\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    mergeProps: null | undefined,\n    options: ConnectOptions<{}, TStateProps, TOwnProps>\n  ): InferableComponentEnhancerWithProps<\n    ResolveThunks<TDispatchProps>,\n    TOwnProps\n  >\n\n  /** mapState,  mapDispatch (as a function), and options */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\n    mergeProps: null | undefined,\n    options: ConnectOptions<State, TStateProps, TOwnProps>\n  ): InferableComponentEnhancerWithProps<\n    TStateProps & TDispatchProps,\n    TOwnProps\n  >\n\n  /** mapState,  mapDispatch (as an object), and options */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    mergeProps: null | undefined,\n    options: ConnectOptions<State, TStateProps, TOwnProps>\n  ): InferableComponentEnhancerWithProps<\n    TStateProps & ResolveThunks<TDispatchProps>,\n    TOwnProps\n  >\n\n  /** mapState, mapDispatch, mergeProps, and options */\n  <\n    TStateProps = {},\n    TDispatchProps = {},\n    TOwnProps = {},\n    TMergedProps = {},\n    State = DefaultState\n  >(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    mergeProps: MergeProps<\n      TStateProps,\n      TDispatchProps,\n      TOwnProps,\n      TMergedProps\n    >,\n    options?: ConnectOptions<State, TStateProps, TOwnProps, TMergedProps>\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\n  // tslint:enable:no-unnecessary-generics\n}\n\nlet hasWarnedAboutDeprecatedPureOption = false\n\n/**\n * Connects a React component to a Redux store.\n *\n * - Without arguments, just wraps the component, without changing the behavior / props\n *\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\n * is to override ownProps (as stated in the docs), so what remains is everything that's\n * not a state or dispatch prop\n *\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\n * should be valid component props, because it depends on mergeProps implementation.\n * As such, it is the user's responsibility to extend ownProps interface from state or\n * dispatch props or both when applicable\n *\n * @param mapStateToProps A function that extracts values from state\n * @param mapDispatchToProps Setup for dispatching actions\n * @param mergeProps Optional callback to merge state and dispatch props together\n * @param options Options for configuring the connection\n *\n */\nfunction connect<\n  TStateProps = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  TMergedProps = {},\n  State = unknown\n>(\n  mapStateToProps?: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps?: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  mergeProps?: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>,\n  {\n    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\n    // @ts-ignore\n    pure,\n    areStatesEqual = strictEqual,\n    areOwnPropsEqual = shallowEqual,\n    areStatePropsEqual = shallowEqual,\n    areMergedPropsEqual = shallowEqual,\n\n    // use React's forwardRef to expose a ref of the wrapped component\n    forwardRef = false,\n\n    // the context consumer to use\n    context = ReactReduxContext,\n  }: ConnectOptions<unknown, unknown, unknown, unknown> = {},\n): unknown {\n  if (process.env.NODE_ENV !== 'production') {\n    if (pure !== undefined && !hasWarnedAboutDeprecatedPureOption) {\n      hasWarnedAboutDeprecatedPureOption = true\n      warning(\n        'The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component',\n      )\n    }\n  }\n\n  const Context = context\n\n  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps)\n  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps)\n  const initMergeProps = mergePropsFactory(mergeProps)\n\n  const shouldHandleStateChanges = Boolean(mapStateToProps)\n\n  const wrapWithConnect = <TProps,>(\n    WrappedComponent: ComponentType<TProps>,\n  ) => {\n    type WrappedComponentProps = TProps &\n      ConnectPropsMaybeWithoutContext<TProps>\n\n    if (process.env.NODE_ENV !== 'production') {\n      const isValid = /*#__PURE__*/ isValidElementType(WrappedComponent)\n      if (!isValid)\n        throw new Error(\n          `You must pass a component to the function returned by connect. Instead received ${stringifyComponent(\n            WrappedComponent,\n          )}`,\n        )\n    }\n\n    const wrappedComponentName =\n      WrappedComponent.displayName || WrappedComponent.name || 'Component'\n\n    const displayName = `Connect(${wrappedComponentName})`\n\n    const selectorFactoryOptions: SelectorFactoryOptions<\n      any,\n      any,\n      any,\n      any,\n      State\n    > = {\n      shouldHandleStateChanges,\n      displayName,\n      wrappedComponentName,\n      WrappedComponent,\n      // @ts-ignore\n      initMapStateToProps,\n      // @ts-ignore\n      initMapDispatchToProps,\n      initMergeProps,\n      areStatesEqual,\n      areStatePropsEqual,\n      areOwnPropsEqual,\n      areMergedPropsEqual,\n    }\n\n    function ConnectFunction<TOwnProps>(\n      props: InternalConnectProps & TOwnProps,\n    ) {\n      const [propsContext, reactReduxForwardedRef, wrapperProps] =\n        React.useMemo(() => {\n          // Distinguish between actual \"data\" props that were passed to the wrapper component,\n          // and values needed to control behavior (forwarded refs, alternate context instances).\n          // To maintain the wrapperProps object reference, memoize this destructuring.\n          const { reactReduxForwardedRef, ...wrapperProps } = props\n          return [props.context, reactReduxForwardedRef, wrapperProps]\n        }, [props])\n\n      const ContextToUse: ReactReduxContextInstance = React.useMemo(() => {\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\n        // Memoize the check that determines which context instance we should use.\n        let ResultContext = Context\n        if (propsContext?.Consumer) {\n          if (process.env.NODE_ENV !== 'production') {\n            const isValid = /*#__PURE__*/ isContextConsumer(\n              // @ts-ignore\n              <propsContext.Consumer />,\n            )\n            if (!isValid) {\n              throw new Error(\n                'You must pass a valid React context consumer as `props.context`',\n              )\n            }\n            ResultContext = propsContext\n          }\n        }\n        return ResultContext\n      }, [propsContext, Context])\n\n      // Retrieve the store and ancestor subscription via context, if available\n      const contextValue = React.useContext(ContextToUse)\n\n      // The store _must_ exist as either a prop or in context.\n      // We'll check to see if it _looks_ like a Redux store first.\n      // This allows us to pass through a `store` prop that is just a plain value.\n      const didStoreComeFromProps =\n        Boolean(props.store) &&\n        Boolean(props.store!.getState) &&\n        Boolean(props.store!.dispatch)\n      const didStoreComeFromContext =\n        Boolean(contextValue) && Boolean(contextValue!.store)\n\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        !didStoreComeFromProps &&\n        !didStoreComeFromContext\n      ) {\n        throw new Error(\n          `Could not find \"store\" in the context of ` +\n            `\"${displayName}\". Either wrap the root component in a <Provider>, ` +\n            `or pass a custom React context provider to <Provider> and the corresponding ` +\n            `React context consumer to ${displayName} in connect options.`,\n        )\n      }\n\n      // Based on the previous check, one of these must be true\n      const store: Store = didStoreComeFromProps\n        ? props.store!\n        : contextValue!.store\n\n      const getServerState = didStoreComeFromContext\n        ? contextValue!.getServerState\n        : store.getState\n\n      const childPropsSelector = React.useMemo(() => {\n        // The child props selector needs the store reference as an input.\n        // Re-create this selector whenever the store changes.\n        return defaultSelectorFactory(store.dispatch, selectorFactoryOptions)\n      }, [store])\n\n      const [subscription, notifyNestedSubs] = React.useMemo(() => {\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY\n\n        // This Subscription's source should match where store came from: props vs. context. A component\n        // connected to the store via props shouldn't use subscription from context, or vice versa.\n        const subscription = createSubscription(\n          store,\n          didStoreComeFromProps ? undefined : contextValue!.subscription,\n        )\n\n        // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n        // the middle of the notification loop, where `subscription` will then be null. This can\n        // probably be avoided if Subscription's listeners logic is changed to not call listeners\n        // that have been unsubscribed in the  middle of the notification loop.\n        const notifyNestedSubs =\n          subscription.notifyNestedSubs.bind(subscription)\n\n        return [subscription, notifyNestedSubs]\n      }, [store, didStoreComeFromProps, contextValue])\n\n      // Determine what {store, subscription} value should be put into nested context, if necessary,\n      // and memoize that value to avoid unnecessary context updates.\n      const overriddenContextValue = React.useMemo(() => {\n        if (didStoreComeFromProps) {\n          // This component is directly subscribed to a store from props.\n          // We don't want descendants reading from this store - pass down whatever\n          // the existing context value is from the nearest connected ancestor.\n          return contextValue!\n        }\n\n        // Otherwise, put this component's subscription instance into context, so that\n        // connected descendants won't update until after this component is done\n        return {\n          ...contextValue,\n          subscription,\n        } as ReactReduxContextValue\n      }, [didStoreComeFromProps, contextValue, subscription])\n\n      // Set up refs to coordinate values between the subscription effect and the render logic\n      const lastChildProps = React.useRef<unknown>()\n      const lastWrapperProps = React.useRef(wrapperProps)\n      const childPropsFromStoreUpdate = React.useRef<unknown>()\n      const renderIsScheduled = React.useRef(false)\n      const isProcessingDispatch = React.useRef(false)\n      const isMounted = React.useRef(false)\n\n      const latestSubscriptionCallbackError = React.useRef<Error>()\n\n      useIsomorphicLayoutEffect(() => {\n        isMounted.current = true\n        return () => {\n          isMounted.current = false\n        }\n      }, [])\n\n      const actualChildPropsSelector = React.useMemo(() => {\n        const selector = () => {\n          // Tricky logic here:\n          // - This render may have been triggered by a Redux store update that produced new child props\n          // - However, we may have gotten new wrapper props after that\n          // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\n          // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\n          // So, we'll use the child props from store update only if the wrapper props are the same as last time.\n          if (\n            childPropsFromStoreUpdate.current &&\n            wrapperProps === lastWrapperProps.current\n          ) {\n            return childPropsFromStoreUpdate.current\n          }\n\n          // TODO We're reading the store directly in render() here. Bad idea?\n          // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\n          // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\n          // to determine what the child props should be.\n          return childPropsSelector(store.getState(), wrapperProps)\n        }\n        return selector\n      }, [store, wrapperProps])\n\n      // We need this to execute synchronously every time we re-render. However, React warns\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\n      // just useEffect instead to avoid the warning, since neither will run anyway.\n\n      const subscribeForReact = React.useMemo(() => {\n        const subscribe = (reactListener: () => void) => {\n          if (!subscription) {\n            return () => {}\n          }\n\n          return subscribeUpdates(\n            shouldHandleStateChanges,\n            store,\n            subscription,\n            // @ts-ignore\n            childPropsSelector,\n            lastWrapperProps,\n            lastChildProps,\n            renderIsScheduled,\n            isMounted,\n            childPropsFromStoreUpdate,\n            notifyNestedSubs,\n            reactListener,\n          )\n        }\n\n        return subscribe\n      }, [subscription])\n\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [\n        lastWrapperProps,\n        lastChildProps,\n        renderIsScheduled,\n        wrapperProps,\n        childPropsFromStoreUpdate,\n        notifyNestedSubs,\n      ])\n\n      let actualChildProps: Record<string, unknown>\n\n      try {\n        actualChildProps = useSyncExternalStore(\n          // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\n          subscribeForReact,\n          // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\n          // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\n          actualChildPropsSelector,\n          getServerState\n            ? () => childPropsSelector(getServerState(), wrapperProps)\n            : actualChildPropsSelector,\n        )\n      } catch (err) {\n        if (latestSubscriptionCallbackError.current) {\n          // eslint-disable-next-line no-extra-semi\n          ;(\n            err as Error\n          ).message += `\\nThe error may be correlated with this previous error:\\n${latestSubscriptionCallbackError.current.stack}\\n\\n`\n        }\n\n        throw err\n      }\n\n      useIsomorphicLayoutEffect(() => {\n        latestSubscriptionCallbackError.current = undefined\n        childPropsFromStoreUpdate.current = undefined\n        lastChildProps.current = actualChildProps\n      })\n\n      // Now that all that's done, we can finally try to actually render the child component.\n      // We memoize the elements for the rendered child component as an optimization.\n      const renderedWrappedComponent = React.useMemo(() => {\n        return (\n          // @ts-ignore\n          <WrappedComponent\n            {...actualChildProps}\n            ref={reactReduxForwardedRef}\n          />\n        )\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps])\n\n      // If React sees the exact same element reference as last time, it bails out of re-rendering\n      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\n      const renderedChild = React.useMemo(() => {\n        if (shouldHandleStateChanges) {\n          // If this component is subscribed to store updates, we need to pass its own\n          // subscription instance down to our descendants. That means rendering the same\n          // Context instance, and putting a different value into the context.\n          return (\n            <ContextToUse.Provider value={overriddenContextValue}>\n              {renderedWrappedComponent}\n            </ContextToUse.Provider>\n          )\n        }\n\n        return renderedWrappedComponent\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue])\n\n      return renderedChild\n    }\n\n    const _Connect = React.memo(ConnectFunction)\n\n    type ConnectedWrapperComponent = typeof _Connect & {\n      WrappedComponent: typeof WrappedComponent\n    }\n\n    // Add a hacky cast to get the right output type\n    const Connect = _Connect as unknown as ConnectedComponent<\n      typeof WrappedComponent,\n      WrappedComponentProps\n    >\n    Connect.WrappedComponent = WrappedComponent\n    Connect.displayName = ConnectFunction.displayName = displayName\n\n    if (forwardRef) {\n      const _forwarded = React.forwardRef(function forwardConnectRef(\n        props,\n        ref,\n      ) {\n        // @ts-ignore\n        return <Connect {...props} reactReduxForwardedRef={ref} />\n      })\n\n      const forwarded = _forwarded as ConnectedWrapperComponent\n      forwarded.displayName = displayName\n      forwarded.WrappedComponent = WrappedComponent\n      return /*#__PURE__*/ hoistStatics(forwarded, WrappedComponent)\n    }\n\n    return /*#__PURE__*/ hoistStatics(Connect, WrappedComponent)\n  }\n\n  return wrapWithConnect\n}\n\nexport default connect as Connect\n","import axios from \"axios\";\r\n\r\nconst contactsInstance = axios.create({\r\n  baseURL: \"https://65ccd3f8dd519126b83fa909.mockapi.io/\",\r\n});\r\n\r\nexport const setToken = (token) => {\r\n  contactsInstance.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n};\r\n\r\nexport const requestRegister = async (formData) => {\r\n  const { data } = await contactsInstance.post(\"user/signup\", formData);\r\n  setToken(data.token);\r\n  \r\n  console.log('data from API contacts =>: ', data);\r\n  return data;\r\n};\r\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { requestRegister } from \"../services/apiContacts\";\r\n\r\nexport const registerThunk = createAsyncThunk(\r\n  \"auth/register\",\r\n\r\n  async (formData, ThunkAPI) => {\r\n    try {\r\n      const authData = await requestRegister(formData);\r\n\r\n      console.log(\"authData from  registerThunk: ========>\", authData);\r\n\r\n      return authData; // action payload\r\n    } catch (error) {\r\n      return ThunkAPI.rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n","import { useForm } from \"react-hook-form\";\r\n\r\nimport \"./Register.styled.scss\";\r\nimport Image from \"../../assets/images/illustration.png\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { registerThunk } from \"../../redux/authReduser\";\r\n\r\nconst Register = () => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = (data) => {\r\n    dispatch(registerThunk(data))\r\n    reset();\r\n    console.log(data);\r\n  };\r\n  console.log(errors);\r\n  \r\n  return (\r\n    <section className=\"container\">\r\n      <div className=\"box-image\">\r\n        <img src={Image} alt=\"Illustration\" className=\"img-register\" />\r\n        <p className=\"support-image\">Word · Translation · Grammar · Progress</p>\r\n      </div>\r\n\r\n      <div className=\"box\">\r\n        <h1 className=\"title\">Register</h1>\r\n        <p className=\"description\">\r\n          To start using our services, please fill out the registration form\r\n          below. All fields are mandatory:\r\n        </p>\r\n\r\n        <div>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Name\"\r\n              {...register(\"Name\", { required: true })}\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Email\"\r\n              {...register(\"Email\", { required: true, pattern: /^\\S+@\\S+$/i })}\r\n            />\r\n            <input\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              {...register(\"Password\", { required: true })}\r\n            />\r\n\r\n            <input type=\"submit\" value=\"Register\" />\r\n            <NavLink to=\"/login\" className=\"btn-login\">\r\n              Login\r\n            </NavLink>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=Symbol.for(\"react.element\"),n=Symbol.for(\"react.portal\"),p=Symbol.for(\"react.fragment\"),q=Symbol.for(\"react.strict_mode\"),r=Symbol.for(\"react.profiler\"),t=Symbol.for(\"react.provider\"),u=Symbol.for(\"react.context\"),v=Symbol.for(\"react.forward_ref\"),w=Symbol.for(\"react.suspense\"),x=Symbol.for(\"react.memo\"),y=Symbol.for(\"react.lazy\"),z=Symbol.iterator;function A(a){if(null===a||\"object\"!==typeof a)return null;a=z&&a[z]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nvar B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};\nE.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;\nH.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}\nfunction N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g;function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction R(a,b,e,d,c){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=\"\"===d?\".\"+Q(h,0):d,I(c)?(e=\"\",null!=a&&(e=a.replace(P,\"$&/\")+\"/\"),R(c,b,e,\"\",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?\"\":(\"\"+c.key).replace(P,\"$&/\")+\"/\")+a)),b.push(c)),1;h=0;d=\"\"===d?\".\":d+\":\";if(I(a))for(var g=0;g<a.length;g++){k=\na[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if(\"object\"===k)throw b=String(a),Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b)+\"). If you meant to render a collection of children, use an array instead.\");return h}\nfunction S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,\"\",\"\",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}\nvar U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};exports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error(\"React.Children.only expected to receive a single React element child.\");return a}};exports.Component=E;exports.Fragment=p;\nexports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;\nexports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+a+\".\");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);\nfor(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};\nexports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=function(){throw Error(\"act(...) is not supported in production builds of React.\");};\nexports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};exports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};\nexports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};exports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};\nexports.useTransition=function(){return U.current.useTransition()};exports.version=\"18.2.0\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * @license React\n * use-sync-external-store-with-selector.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var g=require(\"react\");function n(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var p=\"function\"===typeof Object.is?Object.is:n,q=g.useSyncExternalStore,r=g.useRef,t=g.useEffect,u=g.useMemo,v=g.useDebugValue;\nexports.useSyncExternalStoreWithSelector=function(a,b,e,l,h){var c=r(null);if(null===c.current){var f={hasValue:!1,value:null};c.current=f}else f=c.current;c=u(function(){function a(a){if(!c){c=!0;d=a;a=l(a);if(void 0!==h&&f.hasValue){var b=f.value;if(h(b,a))return k=b}return k=a}b=k;if(p(d,a))return b;var e=l(a);if(void 0!==h&&h(b,e))return b;d=a;return k=e}var c=!1,d,k,m=void 0===e?null:e;return[function(){return a(b())},null===m?void 0:function(){return a(m())}]},[b,e,l,h]);var d=q(a,c[0],c[1]);\nt(function(){f.hasValue=!0;f.value=d},[d]);v(d);return d};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/use-sync-external-store-with-selector.production.min.js');\n} else {\n  module.exports = require('./cjs/use-sync-external-store-with-selector.development.js');\n}\n"],"names":["React","ReactOriginal","ContextKey","Symbol","for","gT","globalThis","getContext","_gT$ContextKey","createContext","contextMap","Map","realContext","get","set","ReactReduxContext","createReduxContextHook","context","arguments","length","undefined","useContext","useReduxContext","window","document","createElement","useLayoutEffect","useEffect","Object","defineProperty","getOwnPropertyNames","getOwnPropertySymbols","getOwnPropertyDescriptor","getPrototypeOf","prototype","createStoreHook","useReduxContext2","useStore2","useStore","store","assign","withTypes","createDispatchHook","useDispatch2","useDispatch","dispatch","fn","useSyncExternalStoreWithSelector2","initializeConnect","React2","contactsInstance","axios","create","baseURL","requestRegister","async","data","post","formData","token","defaults","headers","common","Authorization","concat","console","log","registerThunk","createAsyncThunk","ThunkAPI","authData","error","rejectWithValue","message","Register","register","handleSubmit","reset","formState","errors","useForm","_jsxs","className","children","_jsx","src","Image","alt","onSubmit","type","placeholder","required","pattern","value","NavLink","to","l","n","p","q","r","t","u","v","w","x","y","z","iterator","B","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","C","D","E","a","b","e","this","props","refs","updater","F","G","isReactComponent","setState","Error","forceUpdate","H","constructor","isPureReactComponent","I","Array","isArray","J","hasOwnProperty","K","current","L","key","ref","__self","__source","M","d","c","k","h","call","g","f","m","defaultProps","$$typeof","_owner","O","P","Q","replace","escape","toString","R","N","push","A","next","done","String","keys","join","S","T","_status","_result","then","default","U","V","transition","W","ReactCurrentDispatcher","ReactCurrentBatchConfig","ReactCurrentOwner","exports","Children","map","forEach","apply","count","toArray","only","Component","Fragment","Profiler","PureComponent","StrictMode","Suspense","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","cloneElement","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_defaultValue","_globalName","_context","createFactory","bind","createRef","forwardRef","render","isValidElement","lazy","_payload","_init","memo","compare","startTransition","unstable_act","useCallback","useDebugValue","useDeferredValue","useId","useImperativeHandle","useInsertionEffect","useMemo","useReducer","useRef","useState","useSyncExternalStore","useTransition","version","module","require","is","useSyncExternalStoreWithSelector","hasValue"],"sourceRoot":""}